# 2023-12-28 11:10
name: act-build-fail2ban

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
#  push:
#    paths-ignore:
#    - 'doc/**'
#    - 'files/**'
#    - 'man/**'
#  pull_request:
#    paths-ignore:
#    - 'doc/**'
#    - 'files/**'
#    - 'man/**'
  workflow_dispatch:
    inputs:
      run_tests:
        description: Run tests
        type: boolean
        required: true
        default: false

env:
  PRG_NAME:   "fail2ban"
  PRG_VER:    "1.0.0"
  TAG_NAME:   "fail2ban"
  TAG_VER:    "1.0.0"
  TAG_BUILD:  "-b"
  TAG_REF:    "0000000"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9, '3.10', '3.11', '3.12', '3.13.0-alpha.2', pypy3.10]
      fail-fast: false
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Grant systemd-journal access
        run: sudo usermod -a -G systemd-journal "$USER" || echo 'no systemd-journal access'

      - name: Python version
        run: |
          F2B_PY=$(python -c "import sys; print(sys.version)")
          echo "Python: ${{ matrix.python-version }} -- ${F2B_PY/$'\n'/ }"
          F2B_PYV=$(echo "${F2B_PY}" | grep -oP '^\d+(?:\.\d+)')
          F2B_PY=${F2B_PY:0:1}
          echo "Set F2B_PY=$F2B_PY, F2B_PYV=$F2B_PYV"
          echo "F2B_PY=$F2B_PY" >> $GITHUB_ENV
          echo "F2B_PYV=$F2B_PYV" >> $GITHUB_ENV
          # for GHA we need to monitor all journals, since it cannot be found using SYSTEM_ONLY(4):
          echo "F2B_SYSTEMD_DEFAULT_FLAGS=0" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          #if [[ "$F2B_PY" = 3 ]]; then python -m pip install --upgrade pip || echo "can't upgrade pip"; fi
          #sudo apt-get -y install python${F2B_PY/2/}-pyinotify || echo 'inotify not available'
          python -m pip install pyinotify || echo 'inotify not available'
          sudo apt-get -y install sqlite3 || echo 'sqlite3 not available'
          #sudo apt-get -y install python${F2B_PY/2/}-systemd || echo 'systemd not available'
          sudo apt-get -y install libsystemd-dev || echo 'systemd dependencies seems to be unavailable'
          python -m pip install systemd-python || echo 'systemd not available'
          # readline if available as module:
          python -c 'import readline' 2> /dev/null || python -m pip install readline || echo 'readline not available'
          # asyncore/asynchat:
          if dpkg --compare-versions "$F2B_PYV" ge 3.12; then
            #sudo apt-get -y install python${F2B_PY/2/}-setuptools || echo 'setuptools not unavailable'
            python -m pip install setuptools || echo "can't install setuptools"
            # don't install async* modules, we need to cover bundled-in libraries:
            #python -m pip install pyasynchat || echo "can't install pyasynchat";
            #python -m pip install pyasyncore || echo "can't install pyasyncore";
          fi

      - name: Before scripts
        run: |
          cd "$GITHUB_WORKSPACE"
          _debug() { echo -n "$1 "; err=$("${@:2}" 2>&1) && echo 'OK' || echo -e "FAIL\n$err"; }
          # (debug) output current preferred encoding:
          _debug 'Encodings:' python -c 'import locale, sys; from fail2ban.helpers import PREFER_ENC; print(PREFER_ENC, locale.getpreferredencoding(), (sys.stdout and sys.stdout.encoding))'
          # (debug) backend availabilities:
          echo 'Backends:'
          _debug '- systemd:' python -c 'from fail2ban.server.filtersystemd import FilterSystemd'
          #_debug '- systemd (root): ' sudo python -c 'from fail2ban.server.filtersystemd import FilterSystemd'
          _debug '- pyinotify:' python -c 'from fail2ban.server.filterpyinotify import FilterPyinotify'

      - name: Test suite
        if: ${{ inputs.run_tests }}
        run: |
          #python setup.py test
          python bin/fail2ban-testcases --verbosity=2

      #- name: Test suite (debug some systemd tests only)
         #run: python bin/fail2ban-testcases --verbosity=2 "[sS]ystemd|[jJ]ournal"
         #run: python bin/fail2ban-testcases --verbosity=2 -l 5 "test_WrongChar"

      - name: Build
        run: python setup.py build

      #- name: Test initd scripts
      #  run: shellcheck -s bash -e SC1090,SC1091 files/debian-initd

# program version begin
      - name: Get program version
        shell: bash
        run: |
          _version_=$(grep "version =" fail2ban/version.py  | awk '{print $3}' | tr -d '\"');
          echo "PRG_VER=$_version_";
          echo "PRG_VER=$_version_" >> $GITHUB_ENV;
          echo "TAG_VER=$_version_"  >> $GITHUB_ENV;
          echo "ARC_NAME=${{ env.TAG_NAME }}-$_version_-python-${{ matrix.python-version }}.zip" >> $GITHUB_ENV;

      - name: Print program version
        shell: bash
        run: |
          echo "PRG_VER  =${{ env.PRG_VER }}";
          echo "TAG_VER  =${{ env.PRG_VER }}";
          echo "ARC_NAME =${{ env.ARC_NAME }}";
# program version end

# - get ref set build begin
      - name: Get ref, set build version
        shell: bash
        run: |
          _ref_all_=$(git log -1 --format='%H')
          # _ref_=$(echo ${_ref_all_::7})
          _date_=$(date +%Y%m%d)
          _ref_org_=${{ env.TAG_REF }}
          _ref_len_="${#_ref_org_}"
          _ref_=$(echo ${_ref_all_::$_ref_len_})
          _build_=${{ env.TAG_BUILD }}-$_date_-$_ref_
          echo "TAG_REF=$_ref_"     >> $GITHUB_ENV
          echo "TAG_BUILD=$_build_" >> $GITHUB_ENV
          echo "TAG_DATE=$_date_"   >> $GITHUB_ENV
          echo "WORK_DIR=$(pwd)"    >> $GITHUB_ENV

      - name: Print ref, build version
        shell: bash
        run: |
          echo "REF: ${{ env.TAG_REF }}
          echo "BLD: ${{ env.TAG_BUILD }}
          echo "${{ env.TAG_NAME }}-${{ env.TAG_BUILD }}" > _tag_name_.txt
# - get ref set build end

# zip release begin
      - name: Create Zip Archive Release
        uses: deep-soft/zip-release@v2
        with:
          type: 'zip'
          filename: '${{ env.ARC_NAME }}'
          directory: '.'
          exclusions: ''
          recursive_exclusions: ''
          path: '.'
        # archive name is ${{ env.ZIP_RELEASE_ARCHIVE }}

      - name: Upload zip
        continue-on-error: true
        uses: deep-soft/upload-artifact@main
        with:
          name: '${{ env.ARC_NAME }}'
          path: '${{ env.ZIP_RELEASE_ARCHIVE }}'

      - name: Publish
        continue-on-error: true
        uses: deep-soft/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}-${{ env.TAG_VER }}-${{ env.TAG_BUILD }}
          files: |
            ${{ env.ZIP_RELEASE_ARCHIVE }}
            _tag_name_.txt
# zip release end
